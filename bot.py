
import json
import time
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

BOT_TOKEN = "7793860828:AAH-saWOoonpqnREsw62_oRevNZV8DD1utw"
DATA_FILE = "users.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try:
    with open(DATA_FILE, "r") as f:
        users = json.load(f)
except FileNotFoundError:
    users = {}

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(users, f)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üìú –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üéÆ –ú–æ–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"), KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω")],
        [KeyboardButton("‚ö°Ô∏è –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥"), KeyboardButton("üíµ –ü—Ä–æ–¥–∞—Ç—å BTC")],
        [KeyboardButton("üìà –ö—É—Ä—Å BTC")]
    ],
    resize_keyboard=True
)

# –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å BTC
def get_btc_usd():
    try:
        response = requests.get("https://api.coindesk.com/v1/bpi/currentprice/USD.json")
        return response.json()["bpi"]["USD"]["rate_float"]
    except:
        return 0

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in users:
        users[user_id] = {
            "balance_btc": 0.0,
            "balance_usd": 0.0,
            "gpus": {"Intel HD Graphics": 0.00001},
            "last_mine": time.time()
        }
        save_data()
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–¥–∞–Ω–∞ Intel HD Graphics (0.00001 BTC/—á).",
            reply_markup=main_menu
        )
    else:
        await update.message.reply_text(
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç —Ç–≤–æ—ë –º–µ–Ω—é:",
            reply_markup=main_menu
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text

    if user_id not in users:
        await start(update, context)
        return

    if text == "üìú –ü—Ä–æ—Ñ–∏–ª—å":
        await profile(update, context)
    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await balance(update, context)
    elif text == "üéÆ –ú–æ–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã":
        await gpus(update, context)
    elif text == "üõí –ú–∞–≥–∞–∑–∏–Ω":
        await shop(update, context)
    elif text == "‚ö°Ô∏è –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥":
        await mine(update, context)
    elif text == "üíµ –ü—Ä–æ–¥–∞—Ç—å BTC":
        await sell_btc(update, context)
    elif text == "üìà –ö—É—Ä—Å BTC":
        await btc_rate(update, context)
    elif text.lower().startswith("–∫—É–ø–∏—Ç—å"):
        await buy_gpu(update, context)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è ü§ñ")

# –ü—Ä–æ—Ñ–∏–ª—å
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = users[str(update.effective_user.id)]
    await update.message.reply_text(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"BTC: {user['balance_btc']:.6f} BTC\n"
        f"USD: ${user['balance_usd']:.2f}\n"
        f"–ö–∞—Ä—Ç—ã: {', '.join(user['gpus'].keys())}"
    )

# –ë–∞–ª–∞–Ω—Å
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = users[str(update.effective_user.id)]
    rate = get_btc_usd()
    usd_equiv = user['balance_btc'] * rate
    await update.message.reply_text(
        f"üí∞ –ë–∞–ª–∞–Ω—Å:\n"
        f"BTC: {user['balance_btc']:.6f} BTC (~${usd_equiv:.2f})\n"
        f"USD: ${user['balance_usd']:.2f}\n"
        f"–ö—É—Ä—Å BTC: ${rate:.2f}"
    )

# –ú–æ–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
async def gpus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = users[str(update.effective_user.id)]
    if not user['gpus']:
        await update.message.reply_text("üéÆ –ù–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç.")
    else:
        text = "üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã:\n"
        for name, power in user['gpus'].items():
            text += f"- {name}: {power} BTC/—á\n"
        await update.message.reply_text(text)

# –ú–∞–≥–∞–∑–∏–Ω
async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõí –ú–∞–≥–∞–∑–∏–Ω:\n"
        "1. GTX 1050 Ti ‚Äî $50 ‚Äî 0.001 BTC/—á\n"
        "2. RTX 3080 ‚Äî $500 ‚Äî 0.01 BTC/—á\n"
        "–ù–∞–ø–∏—à–∏: –∫—É–ø–∏—Ç—å 1 –∏–ª–∏ –∫—É–ø–∏—Ç—å 2"
    )
# –ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—É
async def buy_gpu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = users[str(update.effective_user.id)]
    text = update.message.text.lower()

    if "1" in text:
        name, price, power = "GTX 1050 Ti", 50, 0.001
    elif "2" in text:
        name, price, power = "RTX 3080", 500, 0.01
    else:
        await update.message.reply_text("‚ùå –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –∫—É–ø–∏—Ç—å ü§ñ")
        return

    if user['balance_usd'] >= price:
        user['balance_usd'] -= price
        user['gpus'][name] = user['gpus'].get(name, 0) + power
        save_data()
        await update.message.reply_text(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {name} –∑–∞ ${price}!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ ${price}.")

# –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥
async def mine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = users[str(update.effective_user.id)]
    now = time.time()
    earned = sum(user['gpus'].values()) * ((now - user['last_mine']) / 3600)
    user['balance_btc'] += earned
    user['last_mine'] = now
    save_data()
    await update.message.reply_text(f"‚ö°Ô∏è –°–æ–±—Ä–∞–Ω–æ: {earned:.6f} BTC!")

# –ü—Ä–æ–¥–∞—Ç—å BTC
async def sell_btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = users[str(update.effective_user.id)]
    if user['balance_btc'] <= 0:
        await update.message.reply_text("‚ùå –ù–µ—Ç BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
        return
    rate = get_btc_usd()
    usd = user['balance_btc'] * rate
    user['balance_usd'] += usd
    user['balance_btc'] = 0.0
    save_data()
    await update.message.reply_text(f"üíµ –ü—Ä–æ–¥–∞–Ω–æ –∑–∞ ${usd:.2f} –ø–æ –∫—É—Ä—Å—É ${rate:.2f}.")

# –ö—É—Ä—Å BTC
async def btc_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rate = get_btc_usd()
    await update.message.reply_text(f"üìà –ö—É—Ä—Å BTC: ${rate:.2f}")

# –ó–∞–ø—É—Å–∫
app = Application.builder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()